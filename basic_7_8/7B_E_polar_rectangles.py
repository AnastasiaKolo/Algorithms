# # E_polar_rectangles
# https://contest.yandex.ru/contest/29396/problems/E/
# Пусть задана стандартная декартова плоскость.
# Если на ней нарисовать две окружности с центром в начале координат, то
# область, находящаяся между ними, называется кольцом (на рисунке обозначена синим).
# Если на ней нарисовать два луча, то область, заметаемая первым лучом при движении
# ко второму, называется углом (т.е. область между этими двумя лучами, на
# рисунке обозначена зеленым). Полярным прямоугольником называется
# пересечение некоторого угла с некоторым кольцом (на рисунке обозначено красным).
#
# Задано несколько полярных прямоугольников. Найдите площадь их пересечения.
# Помните, что пересечение полярных прямоугольников может состоять из нескольких частей!
#
# Формат ввода
# В первой строке вводится целое число N — количество прямоугольников
# (1 <= N <= 100 000). Далее в N строках содержится описание
# прямоугольников. Каждый прямоугольник описывается четверкой действительных
# чисел r1, r2, φ1, φ2, где r1, r2 обозначают радиусы окружностей, образующих
# кольцо (r1 < r2), а φ1, φ2 обозначают углы, образованные первым и
# вторым лучами с осью абсцисс, заданные в радианах. При этом заметается
# область от первого луча до второго в направлении против часовой стрелки
# (т.е. возрастания углов), даже в случае, когда φ1 > φ2. Все числа
# заданы максимум с шестью знаками после десятичной точки. Углы лежат в
# полуинтервале [0, 2π), а радиусы не превосходят 10^6. Гарантируется,
# что φ1 != φ2.
#
# Формат вывода
# Выведите единственное число — площадь искомого пересечения. Ответ
# будет считаться правильным, если его абсолютная или относительная
# погрешность не будет превышать 10^-6.
PI = 3.141592653589793

def calc_area(r1, r2, fi1, fi2):
    a = (fi2 - fi1)*(r2 ** 2 - r1 ** 2) / 2
    return a

def scanline_fi(rects):
    events_fi = []
    for rect in rects:
        r1, r2, fi1, fi2 = rect
        if fi2 > fi1:
            # прямоугольник не проходит через 0
            events_fi.append((fi1, 1, r1, r2)) # начало
            events_fi.append((fi2, -1, r1, r2)) # конец
        else:
            # прямоугольник проходит через 0
            # поэтому добавим два с разбиением в точке 0
            events_fi.append((0, 1, r1, r2)) # начало
            events_fi.append((fi2, -1, r1, r2)) # конец
            events_fi.append((fi1, 1, r1, r2))  # начало
            events_fi.append((2 * PI, -1, r1, r2))  # конец
    events_fi.sort()
    area = 0
    cnt_rect = 0
    active_rects = set()
    for i in range(len(events_fi)):
        if events_fi[i][1] == 1:     # начало
            cnt_rect += 1
            active_rects.add()
        elif events_fi[i][1] == -1:   # конец
            cnt_rect -= 1

    return area

with open('input.txt') as f:
    n = int(f.readline())
    polar_rects = []
    for i in range(n):
        r1, r2, fi1, fi2 = map(float, f.readline().split())
        polar_rects.append((r1, r2, fi1, fi2))

print(polar_rects)

'''
input
2
1 3 0 3
2 4 1.5 4.5
output
3.7500000000

input
2
1 2 0 3
1 2 2 1

output
3.0000000000

'''